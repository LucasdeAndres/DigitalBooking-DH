{"ast":null,"code":"/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function (define) {\n  'use strict';\n\n  define(function () {\n    return function addWith(Promise) {\n      /**\n       * Returns a promise whose handlers will be called with `this` set to\n       * the supplied receiver.  Subsequent promises derived from the\n       * returned promise will also have their handlers called with receiver\n       * as `this`. Calling `with` with undefined or no arguments will return\n       * a promise whose handlers will again be called in the usual Promises/A+\n       * way (no `this`) thus safely undoing any previous `with` in the\n       * promise chain.\n       *\n       * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n       * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n       *\n       * @param {object} receiver `this` value for all handlers attached to\n       *  the returned promise.\n       * @returns {Promise}\n       */\n      Promise.prototype['with'] = Promise.prototype.withThis = function (receiver) {\n        var p = this._beget();\n        var child = p._handler;\n        child.receiver = receiver;\n        this._handler.chain(child, receiver);\n        return p;\n      };\n      return Promise;\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory();\n});","map":{"version":3,"names":["define","addWith","Promise","prototype","withThis","receiver","p","_beget","child","_handler","chain","amd","factory","module","exports"],"sources":["/Users/lucas/Desktop/Coding/Digital_House/Bimestre_4/clonado_2/grupo-04/node_modules/when/lib/decorators/with.js"],"sourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function addWith(Promise) {\n\t\t/**\n\t\t * Returns a promise whose handlers will be called with `this` set to\n\t\t * the supplied receiver.  Subsequent promises derived from the\n\t\t * returned promise will also have their handlers called with receiver\n\t\t * as `this`. Calling `with` with undefined or no arguments will return\n\t\t * a promise whose handlers will again be called in the usual Promises/A+\n\t\t * way (no `this`) thus safely undoing any previous `with` in the\n\t\t * promise chain.\n\t\t *\n\t\t * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n\t\t * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n\t\t *\n\t\t * @param {object} receiver `this` value for all handlers attached to\n\t\t *  the returned promise.\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['with'] = Promise.prototype.withThis = function(receiver) {\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\t\t\tchild.receiver = receiver;\n\t\t\tthis._handler.chain(child, receiver);\n\t\t\treturn p;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n"],"mappings":"AAAA;AACA;AACA;;AAEC,WAASA,MAAM,EAAE;EAAE,YAAY;;EAChCA,MAAM,CAAC,YAAW;IAEjB,OAAO,SAASC,OAAO,CAACC,OAAO,EAAE;MAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACEA,OAAO,CAACC,SAAS,CAAC,MAAM,CAAC,GAAGD,OAAO,CAACC,SAAS,CAACC,QAAQ,GAAG,UAASC,QAAQ,EAAE;QAC3E,IAAIC,CAAC,GAAG,IAAI,CAACC,MAAM,EAAE;QACrB,IAAIC,KAAK,GAAGF,CAAC,CAACG,QAAQ;QACtBD,KAAK,CAACH,QAAQ,GAAGA,QAAQ;QACzB,IAAI,CAACI,QAAQ,CAACC,KAAK,CAACF,KAAK,EAAEH,QAAQ,CAAC;QACpC,OAAOC,CAAC;MACT,CAAC;MAED,OAAOJ,OAAO;IACf,CAAC;EAEF,CAAC,CAAC;AACF,CAAC,EAAC,OAAOF,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACW,GAAG,GAAGX,MAAM,GAAG,UAASY,OAAO,EAAE;EAAEC,MAAM,CAACC,OAAO,GAAGF,OAAO,EAAE;AAAE,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}